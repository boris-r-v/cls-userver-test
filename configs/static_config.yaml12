# yaml
components_manager:
    components:
        # The required common components
        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stderr'
                    level: info
                    overflow_behavior: discard

        # /// [gRPC sample - static config client]
        # yaml
        # Creates gRPC clients
        grpc-client-factory:
            # The TaskProcessor for blocking connection initiation
            task-processor: grpc-blocking-task-processor

            # Optional channel parameters for gRPC Core
            # https://grpc.github.io/grpc/core/group__grpc__arg__keys.html
            channel-args: {}

        # /// [gRPC sample - static config server]
        # yaml
        # Common configuration for gRPC server
        grpc-server:
            # The single listening port for incoming RPCs
            port: $grpc_server_port
            port#fallback: 8091
            completion-queue-count: 3

        counter-service:
            task-processor: main-task-processor
            service-prefix: Counter
            middlewares: [ ]

        # Our wrapper around the generated client for GreeterService
        counter-rpc-client:
            # The service endpoint (URI). We talk to our own service,
            # which is kind of pointless, but works for an example
            endpoint: '[::1]:8091'
        # /// [gRPC sample - static config client]


        redis-database:
            groups:
                - config_name: main_db  # Key to lookup in secdist configuration
                  db: main_db           # Name to refer to the cluster in components::Redis::GetClient()

            subscribe_groups:  # Array of redis clusters to work with in subscribe mode

            thread_pools:
                redis_thread_pool_size: 8
                sentinel_thread_pool_size: 1

        # /// [Sample secdist static config]
        # yaml
        secdist:                                         # Component that stores configuration of hosts and passwords
            provider: default-secdist-provider
        default-secdist-provider:                        # Component that loads configuration of hosts and passwords
            config: /home/boris/UServer/cls_userver/configs/secdist.json  # Values are supposed to be stored in this file
            missing-ok: true                             # ... but if the file is missing it is still ok
            environment-secrets-key: SECDIST_CONFIG      # ... values will be loaded from this environment value
        # /// [Sample secdist static config]

        # In this example, the tests still communicate with the microservice
        # using HTTP, so we still need an HTTP server and an HTTP handler.
        server:
            listener:
                port: 8092
                task_processor: main-task-processor

        counter-rpc-client-http-handler:
                    path: /hello
                    method: POST
                    task_processor: main-task-processor

        testsuite-support:

    default_task_processor: main-task-processor  # Task processor in which components start.

    # /// [gRPC sample - task processor]
    # yaml
    task_processors:
        grpc-blocking-task-processor:  # For blocking gRPC channel creation
            worker_threads: 2
            thread_name: grpc-worker
        # /// [gRPC sample - task processor]
        main-task-processor:           # For non-blocking operations
            worker_threads: 8
        fs-task-processor:             # For blocking filesystem operations
            worker_threads: 2
